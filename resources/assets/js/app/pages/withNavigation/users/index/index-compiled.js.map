{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/* ============\n * Home Index\n * ============\n *\n * This is the home page.\n */\n\nimport { mapGetters } from 'vuex';\nimport store from './../../../../store';\nimport userService from './../../../../services/users';\nimport Forms from './../../../../utils/forms/forms';\nimport Formvue from './../../../../components/form/form.vue';\nimport cardv from './../../../../components/card/card.vue';\nimport modalFormv from './../../../../components/modalForm/modalForm.vue';\nimport timeZones from './../../../../mixins/timeZones';\nimport accountTransformer from './../../../../transformers/custom/accountSetup';\n\nexport default {\n  data() {\n      return {\n          form: new Forms(\n              {\n                  firstName: {\n                      value: '',\n                      type: 'text',\n                      label: 'First Name',\n                      placeholder: 'First Name'\n                  },\n                  lastName: {\n                      value: '',\n                      type: 'text',\n                      label: 'Last Name',\n                      placeholder: 'Last Name'\n                  },\n                  email: {\n                      value: '',\n                      type: 'email',\n                      label: 'Email',\n                      placeholder: 'Email'\n                  },\n                  timeZone: {\n                      value: '',\n                      type: 'select',\n                      label: 'Time Zone',\n                      placeholder: 'select time zone'\n                  },\n                  password: {\n                      value: '',\n                      type: 'password',\n                      label: 'Password',\n                      placeholder: 'Password'\n                  },\n                  passwordConfirmation: {\n                      value: '',\n                      type: 'password',\n                      label: 'Confirm password',\n                      placeholder: 'Confirm password'\n                  },\n              }\n          ),\n          editForm: new Forms({\n              firstName: {\n                  value: '',\n                  type: 'text',\n                  placeholder: 'First Name'\n              },\n              lastName: {\n                  value: '',\n                  type: 'text',\n                  placeholder: 'Last Name'\n              },\n              email: {\n                  value: '',\n                  type: 'email',\n                  placeholder: 'Email'\n              },\n              timeZone: {\n                  value: '',\n                  type: 'select',\n              }\n          }),\n          loading: false,\n          showModalEdit: false,\n          showModalCreate: true,\n          user: {},\n          titleEdit: 'Edit User',\n          titleCreate: 'Create User',\n          dialogFormVisible: false\n      };\n  },\n\n  methods: {\n      currentUser(user) {\n        return user.userId === this.account.userId;\n      },\n      openFormEdit(user) {\n          this.user = user;\n          this.showModalEdit = true;\n          this.editForm.resetFields();\n          this.editForm.assignData(user);\n      },\n\n      cancelFormCreate() {\n          this.showModalCreate = false;\n      },\n\n      cancelFormEdit() {\n          this.showModalEdit = false;\n      },\n\n      openFormCreate() {\n          this.showModalCreate = true;\n          console.log(this.showModalCreate);\n      },\n\n      all(page, limit) {\n        if (!this.loading) {\n          this.loading = true;\n          // eslint-disable-next-line\n          userService.items(page, limit)\n            .then((users) => {\n              this.loading = false;\n            }).catch(() => {\n              this.loading = true;\n            });\n        };\n      },\n      /**\n       * This method will be called when saving the form.\n       */\n      register() {\n          this.form.loading = true;\n          const user = accountTransformer.send(this.form.data());\n          userService.store(user)\n              .then(() => {\n                  this.showModalCreate = false;\n                  this.form.resetFields();\n                  this.all(1, 50);\n                  this.loading = false;\n              })\n              .catch((errors) => {\n                  this.form.loading = true;\n                  this.form.recordErrors(errors);\n              });\n      },\n\n      /**\n       * This method will be called to delete the user.\n       */\n      update() {\n          this.loading = false;\n          this.form.loading = true;\n          const userEdit = accountTransformer.send(this.editForm.data());\n          userService.update(this.user.userId, userEdit)\n              .then(() => {\n                  this.showModalEdit = false;\n                  this.all(1, 50);\n                  this.loading = false;\n              })\n              .catch((errors) => {\n                  this.editForm.loading = true;\n                  this.editForm.recordErrors(errors);\n              });\n      },\n\n      openConfirm(user) {\n        this.dialogFormVisible = true;\n        this.user = user;\n      },\n\n      /**\n       * This method will be called to delete the user.\n       */\n      destroy() {\n          this.loading = false;\n          this.dialogFormVisible = false;\n          console.log(this.$confirm);\n          userService.destroy(this.user.userId)\n            .then(() => {\n              this.all(1, 50);\n              this.loading = false;\n            })\n            .catch((errors) => {\n              console.log(errors);\n            });\n\n      },\n  },\n\n  computed: {\n    ...mapGetters({\n      users: 'users',\n      account: 'account',\n    }),\n  },\n\n  created() {\n\n    this.editForm.setOptions('timeZone', this.timeZones);\n    this.form.setOptions('timeZone', this.timeZones);\n  },\n\n  mounted() {\n    this.all(1, 50);\n  },\n\n  destroyed() {\n      store.dispatch('resetUsers');\n  },\n\n  components: {\n        cardv: cardv,\n        modalFormv: modalFormv,\n        formv: Formvue,\n  },\n\n  mixins: [\n    timeZones,\n  ],\n\n};\n"]}